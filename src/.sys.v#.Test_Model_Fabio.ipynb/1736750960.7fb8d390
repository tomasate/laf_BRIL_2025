{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "610fa4fc-ef5b-429f-b273-a1e7a893f096",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "e0a5f19f-3d5b-4405-97a3-45e539f734c8",
   "metadata": {},
   "outputs": [],
   "source": [
    "import numpy as np\n",
    "from poggers.io import read_fill\n",
    "from typing import Any\n",
    "import pandas as pd\n",
    "import matplotlib.pyplot as plt\n",
    "import seaborn as sns\n",
    "import os\n",
    "from pathlib import Path\n",
    "#from data.data_getter import LocalFileExplorer\n",
    "from model.preprocessor import DifferencePreprocessor\n",
    "#from model.detectors import EnsambleDetector"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "id": "66d2bd25-5907-4e6b-8610-e1dd8aa21778",
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0       1.657073e+09\n",
       "1       1.657073e+09\n",
       "2       1.657073e+09\n",
       "3       1.657073e+09\n",
       "4       1.657073e+09\n",
       "            ...     \n",
       "1576    1.657110e+09\n",
       "1577    1.657110e+09\n",
       "1578    1.657110e+09\n",
       "1579    1.657110e+09\n",
       "1580    1.657110e+09\n",
       "Name: time, Length: 1581, dtype: float64"
      ]
     },
     "execution_count": 14,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df = read_fill(Path(\"example_7921\"), 7921, \"plt\")[1]\n",
    "df.time"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "id": "249ec17d-6a45-4096-a4ba-ff1f72e1e2b6",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "1        1.386294\n",
       "46       0.000122\n",
       "99       0.000122\n",
       "257      0.000122\n",
       "271      0.000122\n",
       "           ...   \n",
       "26020    0.575364\n",
       "26035    0.575364\n",
       "26051    0.575364\n",
       "26059    0.575364\n",
       "26082    0.575364\n",
       "Name: 0, Length: 24397, dtype: float64"
      ]
     },
     "execution_count": 19,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df = read_fill(Path(\"example_7921_2\"), 7921, \"plt\")[1]\n",
    "df[0][df[0] > 0.000062]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "0be4658c-d849-4258-b85b-00ef678c49f3",
   "metadata": {},
   "outputs": [],
   "source": [
    "class Processor:\n",
    "    def __init__(self):\n",
    "        self.preprocessor = DifferencePreprocessor()\n",
    "        #print(mount_path)\n",
    "\n",
    "    def __call__(self, \n",
    "                 parquets_path: str,\n",
    "                 fill_number: str) -> Any:\n",
    "        \"\"\"\n",
    "        Runs the pipeline\n",
    "\n",
    "        Args:\n",
    "            fill_number (int): Fill number\n",
    "            save_path (str, optional): Where to save the output.\n",
    "                Defaults to None.\n",
    "            subsample (int, optional): Subsample rate, in seconds for the data,\n",
    "                A larger subsample rate will make the pipeline run faster,\n",
    "                but the results will be less granular.\n",
    "                Defaults to 5.\n",
    "            return_preprocessed (bool, optional): If True, returns the\n",
    "                preprocessed step for visualization. Defaults to False.\n",
    "            verbose (bool, optional): If True, prints the output\n",
    "                Defaults to False.\n",
    "            generate_plots (bool, optional): If True, generates plots for each\n",
    "                one of the channels and with preprocessing data.\n",
    "                Defaults to False.\n",
    "\n",
    "        Returns:\n",
    "            Any: Output of the pipeline\n",
    "        \"\"\"\n",
    "        attrs, rates_df = read_fill(Path(parquets_path), fill_number, \"plt\")\n",
    "        rates_df.drop(columns = ['run', 'lsnum'], inplace = True)\n",
    "        rates_df.set_index('time', inplace = True)\n",
    "        rates_df.index = pd.to_datetime(rates_df.index, unit = \"s\")\n",
    "        rates_df.columns = rates_df.columns.astype(int)\n",
    "        preprocessed_df = self.preprocess_data(rates_df)\n",
    "        self.plot_rates_merit_fig(rates_df, preprocessed_df)\n",
    "\n",
    "        return rates_df\n",
    "        \n",
    "\n",
    "    def preprocess_data(self, data: pd.DataFrame) -> pd.DataFrame:\n",
    "        \"\"\"\n",
    "        Studies the fill in the dataframe\n",
    "\n",
    "        Args:\n",
    "            data (pd.DataFrame): Dataframe with the data\n",
    "        \"\"\"\n",
    "        dfs = []\n",
    "        for channel in data.columns:\n",
    "            dfs.append(self.study_shannel(data, channel, name=channel))\n",
    "        return pd.concat(dfs, axis=1)\n",
    "\n",
    "    def study_shannel(\n",
    "        self, data: pd.DataFrame, studied_channel: int, name=\"x\"\n",
    "    ) -> pd.DataFrame:\n",
    "        \"\"\"\n",
    "        Studies the channel in the dataframe\n",
    "        It first add the column \"m_agg\" to the dataframe, defined as the average of the channels that are not constant (i.e. those channels which less than 90% consecutive equal values)\n",
    "\n",
    "        Args:\n",
    "            data (pd.DataFrame): Dataframe with the data\n",
    "            studied_channel (int): Channel to be studied\n",
    "            plot (bool, optional): If True, plots the data. Defaults to True.\n",
    "        \"\"\"\n",
    "        df = data.copy()\n",
    "        df[\"m_agg\"] = df[\n",
    "            (   #c is a given channel and the for loop returns the list of channels that are not constant. The mean is calculated only from the colums corresponding to these channels.\n",
    "                c\n",
    "                for c in self.list_nonconstant_channels(df, studied_channel)\n",
    "                if c != studied_channel\n",
    "            )\n",
    "        ].mean(axis=1)\n",
    "        X = self.preprocessor(df, [\"m_agg\", studied_channel]) # [\"m_agg\", studied_channel] is the list of columns to preprocess\n",
    "        return self.preprocessor.build_dataframe(df, X, name=name)\n",
    "\n",
    "    def list_nonconstant_channels(\n",
    "        self, data: pd.DataFrame, exclude: int = None\n",
    "    ) -> list:\n",
    "        \"\"\"\n",
    "        Lists the non-constant channels in the dataframe\n",
    "\n",
    "        Args:\n",
    "            data (pd.DataFrame): Dataframe with the data\n",
    "\n",
    "        Returns:\n",
    "            list: List of the non-constant channels\n",
    "        \"\"\"\n",
    "        are_constant = [\n",
    "            self._is_constant(c, data)\n",
    "            for c in data.columns if str(c).isnumeric()\n",
    "        ]\n",
    "        if exclude:\n",
    "            return [\n",
    "                ch\n",
    "                for ch, is_constant in zip(data.columns, are_constant)\n",
    "                if ch != exclude and not is_constant\n",
    "            ]\n",
    "        return [ch for ch, c in zip(data.columns, are_constant) if not c]\n",
    "\n",
    "    def _is_constant(self, channel: int, data: pd.DataFrame) -> bool:\n",
    "        \"\"\"\n",
    "        Checks if the channel is non-constant in the dataframe\n",
    "\n",
    "        Args:\n",
    "            channel (int): Channel to be checked\n",
    "            data (pd.DataFrame): Dataframe with the data\n",
    "\n",
    "        Returns:\n",
    "            bool: True if the channel is non-constant, False otherwise\n",
    "        \"\"\"\n",
    "        x = data[channel].values\n",
    "        diffs = np.diff(x)\n",
    "        if len(diffs[diffs == 0]) / len(x) > 0.9:\n",
    "            return True\n",
    "        return False\n",
    "        \n",
    "    def plot_rates_merit_fig(self, \n",
    "                             rates_df: pd.DataFrame,\n",
    "                             processed_diff: pd.DataFrame):\n",
    "        fig, ax = plt.subplots(2,1, figsize = (18, 8), sharex = True)\n",
    "        for ch in rates_df.columns:\n",
    "            processed_diff[ch] = processed_diff[ch] / processed_diff[ch].mean()\n",
    "            #ax[0].scatter(rates_df[ch].index, rates_df[ch].values, s=4, label=None)\n",
    "            ax[0].plot(rates_df[ch].index, rates_df[ch].values, linewidth = 2, label=None)\n",
    "            #sns.lineplot(data=rates_df[ch], label=ch, ax = ax[0])\n",
    "            sns.lineplot(data=processed_diff[ch], label=ch, ax = ax[1])\n",
    "        ax[0].set_ylabel('rates')\n",
    "        ax[1].set_ylabel('Norm. Processed diff.')\n",
    "        ax[1].set_xlabel(None)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "id": "ac33caf6-0a95-4b27-847d-2b979dd0bf4f",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 1296x576 with 2 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "searcher = Processor()\n",
    "df = searcher(\"example_7921_2\", 7921)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "id": "fa3bf5ac-ae20-4817-b1f2-46756c23be95",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>0</th>\n",
       "      <th>1</th>\n",
       "      <th>2</th>\n",
       "      <th>3</th>\n",
       "      <th>4</th>\n",
       "      <th>5</th>\n",
       "      <th>6</th>\n",
       "      <th>7</th>\n",
       "      <th>8</th>\n",
       "      <th>9</th>\n",
       "      <th>10</th>\n",
       "      <th>11</th>\n",
       "      <th>12</th>\n",
       "      <th>13</th>\n",
       "      <th>14</th>\n",
       "      <th>15</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>time</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>2022-07-06 02:05:31.000000000</th>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2022-07-06 02:05:48.624999936</th>\n",
       "      <td>0.092424</td>\n",
       "      <td>0.092424</td>\n",
       "      <td>0.092428</td>\n",
       "      <td>0.092420</td>\n",
       "      <td>0.092428</td>\n",
       "      <td>0.092448</td>\n",
       "      <td>0.092448</td>\n",
       "      <td>0.092444</td>\n",
       "      <td>0.092424</td>\n",
       "      <td>0.092424</td>\n",
       "      <td>0.092436</td>\n",
       "      <td>0.092432</td>\n",
       "      <td>0.092428</td>\n",
       "      <td>0.092444</td>\n",
       "      <td>0.092424</td>\n",
       "      <td>0.092420</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2022-07-06 02:06:11.437499904</th>\n",
       "      <td>0.000008</td>\n",
       "      <td>0.000004</td>\n",
       "      <td>0.000004</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000004</td>\n",
       "      <td>0.000008</td>\n",
       "      <td>0.000004</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000004</td>\n",
       "      <td>0.000004</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000008</td>\n",
       "      <td>0.000015</td>\n",
       "      <td>0.000008</td>\n",
       "      <td>0.000008</td>\n",
       "      <td>0.000004</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2022-07-06 02:06:34.823529472</th>\n",
       "      <td>0.000015</td>\n",
       "      <td>0.000011</td>\n",
       "      <td>0.000008</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000008</td>\n",
       "      <td>0.000008</td>\n",
       "      <td>0.000011</td>\n",
       "      <td>0.000004</td>\n",
       "      <td>0.000008</td>\n",
       "      <td>0.000011</td>\n",
       "      <td>0.000008</td>\n",
       "      <td>0.000015</td>\n",
       "      <td>0.000011</td>\n",
       "      <td>0.000004</td>\n",
       "      <td>0.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2022-07-06 02:06:57.705882368</th>\n",
       "      <td>0.000008</td>\n",
       "      <td>0.000008</td>\n",
       "      <td>0.000004</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000004</td>\n",
       "      <td>0.000008</td>\n",
       "      <td>0.000019</td>\n",
       "      <td>0.000004</td>\n",
       "      <td>0.000004</td>\n",
       "      <td>0.000008</td>\n",
       "      <td>0.000011</td>\n",
       "      <td>0.000008</td>\n",
       "      <td>0.000008</td>\n",
       "      <td>0.000008</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000008</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2022-07-06 12:17:10.187500032</th>\n",
       "      <td>0.035960</td>\n",
       "      <td>0.035960</td>\n",
       "      <td>0.035960</td>\n",
       "      <td>0.035960</td>\n",
       "      <td>0.035960</td>\n",
       "      <td>0.035960</td>\n",
       "      <td>0.035960</td>\n",
       "      <td>0.035960</td>\n",
       "      <td>0.035960</td>\n",
       "      <td>0.035960</td>\n",
       "      <td>0.035960</td>\n",
       "      <td>0.035960</td>\n",
       "      <td>0.035960</td>\n",
       "      <td>0.035960</td>\n",
       "      <td>0.035960</td>\n",
       "      <td>0.035960</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2022-07-06 12:17:33.058823680</th>\n",
       "      <td>0.071921</td>\n",
       "      <td>0.071921</td>\n",
       "      <td>0.071921</td>\n",
       "      <td>0.071921</td>\n",
       "      <td>0.071921</td>\n",
       "      <td>0.071921</td>\n",
       "      <td>0.071921</td>\n",
       "      <td>0.071921</td>\n",
       "      <td>0.071921</td>\n",
       "      <td>0.071921</td>\n",
       "      <td>0.071921</td>\n",
       "      <td>0.071921</td>\n",
       "      <td>0.071921</td>\n",
       "      <td>0.071921</td>\n",
       "      <td>0.071921</td>\n",
       "      <td>0.071921</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2022-07-06 12:17:56.812499968</th>\n",
       "      <td>0.035960</td>\n",
       "      <td>0.035960</td>\n",
       "      <td>0.035960</td>\n",
       "      <td>0.035960</td>\n",
       "      <td>0.035960</td>\n",
       "      <td>0.035960</td>\n",
       "      <td>0.035960</td>\n",
       "      <td>0.035960</td>\n",
       "      <td>0.035960</td>\n",
       "      <td>0.035960</td>\n",
       "      <td>0.035960</td>\n",
       "      <td>0.035960</td>\n",
       "      <td>0.035960</td>\n",
       "      <td>0.035960</td>\n",
       "      <td>0.035960</td>\n",
       "      <td>0.035960</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2022-07-06 12:18:19.941176320</th>\n",
       "      <td>0.035960</td>\n",
       "      <td>0.035960</td>\n",
       "      <td>0.035960</td>\n",
       "      <td>0.035960</td>\n",
       "      <td>0.035960</td>\n",
       "      <td>0.035960</td>\n",
       "      <td>0.035960</td>\n",
       "      <td>0.035960</td>\n",
       "      <td>0.035960</td>\n",
       "      <td>0.035960</td>\n",
       "      <td>0.035960</td>\n",
       "      <td>0.035960</td>\n",
       "      <td>0.035960</td>\n",
       "      <td>0.035960</td>\n",
       "      <td>0.035960</td>\n",
       "      <td>0.035960</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2022-07-06 12:18:37.700000000</th>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>1581 rows × 16 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "                                     0         1         2         3   \\\n",
       "time                                                                    \n",
       "2022-07-06 02:05:31.000000000  0.000000  0.000000  0.000000  0.000000   \n",
       "2022-07-06 02:05:48.624999936  0.092424  0.092424  0.092428  0.092420   \n",
       "2022-07-06 02:06:11.437499904  0.000008  0.000004  0.000004  0.000000   \n",
       "2022-07-06 02:06:34.823529472  0.000015  0.000011  0.000008  0.000000   \n",
       "2022-07-06 02:06:57.705882368  0.000008  0.000008  0.000004  0.000000   \n",
       "...                                 ...       ...       ...       ...   \n",
       "2022-07-06 12:17:10.187500032  0.035960  0.035960  0.035960  0.035960   \n",
       "2022-07-06 12:17:33.058823680  0.071921  0.071921  0.071921  0.071921   \n",
       "2022-07-06 12:17:56.812499968  0.035960  0.035960  0.035960  0.035960   \n",
       "2022-07-06 12:18:19.941176320  0.035960  0.035960  0.035960  0.035960   \n",
       "2022-07-06 12:18:37.700000000  0.000000  0.000000  0.000000  0.000000   \n",
       "\n",
       "                                     4         5         6         7   \\\n",
       "time                                                                    \n",
       "2022-07-06 02:05:31.000000000  0.000000  0.000000  0.000000  0.000000   \n",
       "2022-07-06 02:05:48.624999936  0.092428  0.092448  0.092448  0.092444   \n",
       "2022-07-06 02:06:11.437499904  0.000004  0.000008  0.000004  0.000000   \n",
       "2022-07-06 02:06:34.823529472  0.000000  0.000008  0.000008  0.000011   \n",
       "2022-07-06 02:06:57.705882368  0.000004  0.000008  0.000019  0.000004   \n",
       "...                                 ...       ...       ...       ...   \n",
       "2022-07-06 12:17:10.187500032  0.035960  0.035960  0.035960  0.035960   \n",
       "2022-07-06 12:17:33.058823680  0.071921  0.071921  0.071921  0.071921   \n",
       "2022-07-06 12:17:56.812499968  0.035960  0.035960  0.035960  0.035960   \n",
       "2022-07-06 12:18:19.941176320  0.035960  0.035960  0.035960  0.035960   \n",
       "2022-07-06 12:18:37.700000000  0.000000  0.000000  0.000000  0.000000   \n",
       "\n",
       "                                     8         9         10        11  \\\n",
       "time                                                                    \n",
       "2022-07-06 02:05:31.000000000  0.000000  0.000000  0.000000  0.000000   \n",
       "2022-07-06 02:05:48.624999936  0.092424  0.092424  0.092436  0.092432   \n",
       "2022-07-06 02:06:11.437499904  0.000004  0.000004  0.000000  0.000008   \n",
       "2022-07-06 02:06:34.823529472  0.000004  0.000008  0.000011  0.000008   \n",
       "2022-07-06 02:06:57.705882368  0.000004  0.000008  0.000011  0.000008   \n",
       "...                                 ...       ...       ...       ...   \n",
       "2022-07-06 12:17:10.187500032  0.035960  0.035960  0.035960  0.035960   \n",
       "2022-07-06 12:17:33.058823680  0.071921  0.071921  0.071921  0.071921   \n",
       "2022-07-06 12:17:56.812499968  0.035960  0.035960  0.035960  0.035960   \n",
       "2022-07-06 12:18:19.941176320  0.035960  0.035960  0.035960  0.035960   \n",
       "2022-07-06 12:18:37.700000000  0.000000  0.000000  0.000000  0.000000   \n",
       "\n",
       "                                     12        13        14        15  \n",
       "time                                                                   \n",
       "2022-07-06 02:05:31.000000000  0.000000  0.000000  0.000000  0.000000  \n",
       "2022-07-06 02:05:48.624999936  0.092428  0.092444  0.092424  0.092420  \n",
       "2022-07-06 02:06:11.437499904  0.000015  0.000008  0.000008  0.000004  \n",
       "2022-07-06 02:06:34.823529472  0.000015  0.000011  0.000004  0.000000  \n",
       "2022-07-06 02:06:57.705882368  0.000008  0.000008  0.000000  0.000008  \n",
       "...                                 ...       ...       ...       ...  \n",
       "2022-07-06 12:17:10.187500032  0.035960  0.035960  0.035960  0.035960  \n",
       "2022-07-06 12:17:33.058823680  0.071921  0.071921  0.071921  0.071921  \n",
       "2022-07-06 12:17:56.812499968  0.035960  0.035960  0.035960  0.035960  \n",
       "2022-07-06 12:18:19.941176320  0.035960  0.035960  0.035960  0.035960  \n",
       "2022-07-06 12:18:37.700000000  0.000000  0.000000  0.000000  0.000000  \n",
       "\n",
       "[1581 rows x 16 columns]"
      ]
     },
     "execution_count": 19,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "a0cdaa40-71ef-4bbc-a4d1-257cabd6d95e",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>0</th>\n",
       "      <th>1</th>\n",
       "      <th>2</th>\n",
       "      <th>3</th>\n",
       "      <th>4</th>\n",
       "      <th>5</th>\n",
       "      <th>6</th>\n",
       "      <th>7</th>\n",
       "      <th>8</th>\n",
       "      <th>9</th>\n",
       "      <th>10</th>\n",
       "      <th>11</th>\n",
       "      <th>12</th>\n",
       "      <th>13</th>\n",
       "      <th>14</th>\n",
       "      <th>15</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>time</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>2022-07-06 02:05:31.000000000</th>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2022-07-06 02:05:48.624999936</th>\n",
       "      <td>0.092424</td>\n",
       "      <td>0.092424</td>\n",
       "      <td>0.092428</td>\n",
       "      <td>0.092420</td>\n",
       "      <td>0.092428</td>\n",
       "      <td>0.092448</td>\n",
       "      <td>0.092448</td>\n",
       "      <td>0.092444</td>\n",
       "      <td>0.092424</td>\n",
       "      <td>0.092424</td>\n",
       "      <td>0.092436</td>\n",
       "      <td>0.092432</td>\n",
       "      <td>0.092428</td>\n",
       "      <td>0.092444</td>\n",
       "      <td>0.092424</td>\n",
       "      <td>0.092420</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2022-07-06 02:06:11.437499904</th>\n",
       "      <td>0.000008</td>\n",
       "      <td>0.000004</td>\n",
       "      <td>0.000004</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000004</td>\n",
       "      <td>0.000008</td>\n",
       "      <td>0.000004</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000004</td>\n",
       "      <td>0.000004</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000008</td>\n",
       "      <td>0.000015</td>\n",
       "      <td>0.000008</td>\n",
       "      <td>0.000008</td>\n",
       "      <td>0.000004</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2022-07-06 02:06:34.823529472</th>\n",
       "      <td>0.000015</td>\n",
       "      <td>0.000011</td>\n",
       "      <td>0.000008</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000008</td>\n",
       "      <td>0.000008</td>\n",
       "      <td>0.000011</td>\n",
       "      <td>0.000004</td>\n",
       "      <td>0.000008</td>\n",
       "      <td>0.000011</td>\n",
       "      <td>0.000008</td>\n",
       "      <td>0.000015</td>\n",
       "      <td>0.000011</td>\n",
       "      <td>0.000004</td>\n",
       "      <td>0.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2022-07-06 02:06:57.705882368</th>\n",
       "      <td>0.000008</td>\n",
       "      <td>0.000008</td>\n",
       "      <td>0.000004</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000004</td>\n",
       "      <td>0.000008</td>\n",
       "      <td>0.000019</td>\n",
       "      <td>0.000004</td>\n",
       "      <td>0.000004</td>\n",
       "      <td>0.000008</td>\n",
       "      <td>0.000011</td>\n",
       "      <td>0.000008</td>\n",
       "      <td>0.000008</td>\n",
       "      <td>0.000008</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000008</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2022-07-06 12:17:10.187500032</th>\n",
       "      <td>0.035960</td>\n",
       "      <td>0.035960</td>\n",
       "      <td>0.035960</td>\n",
       "      <td>0.035960</td>\n",
       "      <td>0.035960</td>\n",
       "      <td>0.035960</td>\n",
       "      <td>0.035960</td>\n",
       "      <td>0.035960</td>\n",
       "      <td>0.035960</td>\n",
       "      <td>0.035960</td>\n",
       "      <td>0.035960</td>\n",
       "      <td>0.035960</td>\n",
       "      <td>0.035960</td>\n",
       "      <td>0.035960</td>\n",
       "      <td>0.035960</td>\n",
       "      <td>0.035960</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2022-07-06 12:17:33.058823680</th>\n",
       "      <td>0.071921</td>\n",
       "      <td>0.071921</td>\n",
       "      <td>0.071921</td>\n",
       "      <td>0.071921</td>\n",
       "      <td>0.071921</td>\n",
       "      <td>0.071921</td>\n",
       "      <td>0.071921</td>\n",
       "      <td>0.071921</td>\n",
       "      <td>0.071921</td>\n",
       "      <td>0.071921</td>\n",
       "      <td>0.071921</td>\n",
       "      <td>0.071921</td>\n",
       "      <td>0.071921</td>\n",
       "      <td>0.071921</td>\n",
       "      <td>0.071921</td>\n",
       "      <td>0.071921</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2022-07-06 12:17:56.812499968</th>\n",
       "      <td>0.035960</td>\n",
       "      <td>0.035960</td>\n",
       "      <td>0.035960</td>\n",
       "      <td>0.035960</td>\n",
       "      <td>0.035960</td>\n",
       "      <td>0.035960</td>\n",
       "      <td>0.035960</td>\n",
       "      <td>0.035960</td>\n",
       "      <td>0.035960</td>\n",
       "      <td>0.035960</td>\n",
       "      <td>0.035960</td>\n",
       "      <td>0.035960</td>\n",
       "      <td>0.035960</td>\n",
       "      <td>0.035960</td>\n",
       "      <td>0.035960</td>\n",
       "      <td>0.035960</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2022-07-06 12:18:19.941176320</th>\n",
       "      <td>0.035960</td>\n",
       "      <td>0.035960</td>\n",
       "      <td>0.035960</td>\n",
       "      <td>0.035960</td>\n",
       "      <td>0.035960</td>\n",
       "      <td>0.035960</td>\n",
       "      <td>0.035960</td>\n",
       "      <td>0.035960</td>\n",
       "      <td>0.035960</td>\n",
       "      <td>0.035960</td>\n",
       "      <td>0.035960</td>\n",
       "      <td>0.035960</td>\n",
       "      <td>0.035960</td>\n",
       "      <td>0.035960</td>\n",
       "      <td>0.035960</td>\n",
       "      <td>0.035960</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2022-07-06 12:18:37.700000000</th>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>1581 rows × 16 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "                                     0         1         2         3   \\\n",
       "time                                                                    \n",
       "2022-07-06 02:05:31.000000000  0.000000  0.000000  0.000000  0.000000   \n",
       "2022-07-06 02:05:48.624999936  0.092424  0.092424  0.092428  0.092420   \n",
       "2022-07-06 02:06:11.437499904  0.000008  0.000004  0.000004  0.000000   \n",
       "2022-07-06 02:06:34.823529472  0.000015  0.000011  0.000008  0.000000   \n",
       "2022-07-06 02:06:57.705882368  0.000008  0.000008  0.000004  0.000000   \n",
       "...                                 ...       ...       ...       ...   \n",
       "2022-07-06 12:17:10.187500032  0.035960  0.035960  0.035960  0.035960   \n",
       "2022-07-06 12:17:33.058823680  0.071921  0.071921  0.071921  0.071921   \n",
       "2022-07-06 12:17:56.812499968  0.035960  0.035960  0.035960  0.035960   \n",
       "2022-07-06 12:18:19.941176320  0.035960  0.035960  0.035960  0.035960   \n",
       "2022-07-06 12:18:37.700000000  0.000000  0.000000  0.000000  0.000000   \n",
       "\n",
       "                                     4         5         6         7   \\\n",
       "time                                                                    \n",
       "2022-07-06 02:05:31.000000000  0.000000  0.000000  0.000000  0.000000   \n",
       "2022-07-06 02:05:48.624999936  0.092428  0.092448  0.092448  0.092444   \n",
       "2022-07-06 02:06:11.437499904  0.000004  0.000008  0.000004  0.000000   \n",
       "2022-07-06 02:06:34.823529472  0.000000  0.000008  0.000008  0.000011   \n",
       "2022-07-06 02:06:57.705882368  0.000004  0.000008  0.000019  0.000004   \n",
       "...                                 ...       ...       ...       ...   \n",
       "2022-07-06 12:17:10.187500032  0.035960  0.035960  0.035960  0.035960   \n",
       "2022-07-06 12:17:33.058823680  0.071921  0.071921  0.071921  0.071921   \n",
       "2022-07-06 12:17:56.812499968  0.035960  0.035960  0.035960  0.035960   \n",
       "2022-07-06 12:18:19.941176320  0.035960  0.035960  0.035960  0.035960   \n",
       "2022-07-06 12:18:37.700000000  0.000000  0.000000  0.000000  0.000000   \n",
       "\n",
       "                                     8         9         10        11  \\\n",
       "time                                                                    \n",
       "2022-07-06 02:05:31.000000000  0.000000  0.000000  0.000000  0.000000   \n",
       "2022-07-06 02:05:48.624999936  0.092424  0.092424  0.092436  0.092432   \n",
       "2022-07-06 02:06:11.437499904  0.000004  0.000004  0.000000  0.000008   \n",
       "2022-07-06 02:06:34.823529472  0.000004  0.000008  0.000011  0.000008   \n",
       "2022-07-06 02:06:57.705882368  0.000004  0.000008  0.000011  0.000008   \n",
       "...                                 ...       ...       ...       ...   \n",
       "2022-07-06 12:17:10.187500032  0.035960  0.035960  0.035960  0.035960   \n",
       "2022-07-06 12:17:33.058823680  0.071921  0.071921  0.071921  0.071921   \n",
       "2022-07-06 12:17:56.812499968  0.035960  0.035960  0.035960  0.035960   \n",
       "2022-07-06 12:18:19.941176320  0.035960  0.035960  0.035960  0.035960   \n",
       "2022-07-06 12:18:37.700000000  0.000000  0.000000  0.000000  0.000000   \n",
       "\n",
       "                                     12        13        14        15  \n",
       "time                                                                   \n",
       "2022-07-06 02:05:31.000000000  0.000000  0.000000  0.000000  0.000000  \n",
       "2022-07-06 02:05:48.624999936  0.092428  0.092444  0.092424  0.092420  \n",
       "2022-07-06 02:06:11.437499904  0.000015  0.000008  0.000008  0.000004  \n",
       "2022-07-06 02:06:34.823529472  0.000015  0.000011  0.000004  0.000000  \n",
       "2022-07-06 02:06:57.705882368  0.000008  0.000008  0.000000  0.000008  \n",
       "...                                 ...       ...       ...       ...  \n",
       "2022-07-06 12:17:10.187500032  0.035960  0.035960  0.035960  0.035960  \n",
       "2022-07-06 12:17:33.058823680  0.071921  0.071921  0.071921  0.071921  \n",
       "2022-07-06 12:17:56.812499968  0.035960  0.035960  0.035960  0.035960  \n",
       "2022-07-06 12:18:19.941176320  0.035960  0.035960  0.035960  0.035960  \n",
       "2022-07-06 12:18:37.700000000  0.000000  0.000000  0.000000  0.000000  \n",
       "\n",
       "[1581 rows x 16 columns]"
      ]
     },
     "execution_count": 12,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "021a4e14-a223-4bb3-a5d5-441a5210d268",
   "metadata": {},
   "outputs": [],
   "source": [
    "complete_df = searcher('/eos/user/t/tatehort/pylaf/parquets_fills/7921_complete.csv')\n",
    "complete_df"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "b952c29a-2a5a-4992-8c3f-631b5962bbbb",
   "metadata": {},
   "outputs": [],
   "source": [
    "fig, ax = plt.subplots(2,1, figsize = (18, 8))\n",
    "for ch in complete_df.columns:\n",
    "    complete_df[ch] = complete_df[ch]/ complete_df[ch].mean()\n",
    "    sns.lineplot(data=df[ch], label=ch, ax = ax[0])\n",
    "    sns.lineplot(data=complete_df[ch], label=ch, ax = ax[1])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "bdec910e-bf50-4034-9068-c523eb7bbf2b",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.9.12"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
